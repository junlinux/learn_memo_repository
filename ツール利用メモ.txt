ツール利用メモ：
1.apache jmeter

2.zabbix監視：
	ip:http://10.214.64.198/
	ID/PW：氏名コード（s小文字）
	
3.Redmine
	url: http://10.24.71.128/redmine/my/page
	pw: windowsのアカウント
    
4.rundeckジョブ管理
    
    
5.crontabの繰り返す方法
    １）実行時間は、分、時、日、月、曜日を指定し、こちらも半角空白を空けて記録する
    ２）曜日は0から6まで日曜日から土曜日までに対応
    ３）時は24時間表記
    ４）
    
６．docker
    移動可能なイメージは Dockerifle と呼ばれるモノで定義します。
    このようなリソースに接続するには、ポートを外の世界にマッピング（割り当て）する必要がありますし、どのファイルを環境に「複製」（copy in）するか指定する必要もあります。
    docker build -t friendlyname .               # このディレクトリ内にある DockerCile でイメージ作成
    docker run -p 4000:80 friendlyname  # "friendlyname" の実行にあたり、ポート 4000 を 80 に割り当て
    docker run -d -p 4000:80 friendlyname                            # 同じですが、デタッチド・モード
    docker container ls                                                  # 全ての実行中コンテナを表示
    docker container ls -a                                       # 停止中も含めて全てのコンテナを表示
    docker container stop <hash>                                       # 指定したコンテナを丁寧に停止
    docker container kill <hash>                               # 指定したコンテナを強制シャットダウン
    docker container rm <hash>                                   # マシン上から指定したコンテナを削除
    docker container rm $(docker container ls -a -q)                           # 全てのコンテナを削除
    docker image ls -a                                               # マシン上の全てのイメージを表示
    docker image rm <image id>                                       # マシン上の特定のイメージを削除
    docker image rm $(docker image ls -a -q)                         # マシン上の全てのイメージを削除
    docker login                                       # CLI セッションで Docker の認証を行いログイン
    docker tag <image> username/repository:tag      # レジストリにアップロードする <image> にタグ付け
    docker push username/repository:tag                                  # タグ付けしたイメージを送信
    docker run username/repository:tag                               # レジストリにあるイメージを実行
    
    
    FROM ---ベース
    RUN --- コマンド実行する
    ADD --- ファイルのコピー、展開（COPY コピーだけ）
    CMD --- コンテナを実行するときのコマンド（ENTRYPOINT）
    
    docker build 時に -f フラグを使えば、システム上のどこに Dockerfile があるか指定できます
    各命令は独立して実行されるのでご注意ください。新しいイメージの作成時、 RUN cd /tmp を実行したとしても、次の命令には何ら影響を与えません。
    （説明ページ）
    RUN 命令は既存イメージ上の新しいレイヤで、あらゆるコマンドを実行し、その結果をコミットする命令です
    
    EXPOSE 命令は、特定のネットワーク・ポートをコンテナが実行時にリッスンすることを Docker に伝えます。 EXPOSE があっても、これだけではホストからコンテナにアクセスできるようにしません。アクセスするには、 -p フラグを使ってポートの公開範囲を指定するか、 -P フラグで全ての露出ポートを公開する必要があります。
    
    docker-compose stop
    
    コンテナイメージをファイルとして書き出す。
    docker save <イメージ名> > <イメージファイル名.tar>
    
    $ docker run -t -i ubuntu:14.04 /bin/bash
    
    コンテナネットワークの設定：
    http://docs.docker.jp/engine/tutorials/networkingcontainers.html
    
    コンテナでデータを管理：
    http://docs.docker.jp/engine/tutorials/dockervolumes.html
    
    docker-composeからイメージを実行する方法：
    
    
    docker rm コンテナ名
    
    起動しているコンテナに入る時にも使用したexecコマンドを用いる。
    
    #フォアグラウンドで実行
　　  $ sudo docker exec コンテナ名またはコンテナID コンテナ内で実行したいコマンド
    #バックグラウンドで実行
　　  $ sudo docker exec -d コンテナ名またはコンテナID コンテナ内で実行したいコマンド

    dockerコンテナの中に入ってshellなどを叩きたいときありますよね。
    docker exec -i -t コンテナ名 bash
    